name: Docker Image CI/CD

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC 00:00运行
  workflow_dispatch:
    inputs:
      overflow_version:
        description: 'Overflow版本号（可选，默认使用最新版本）'
        required: false
        type: string
      mirai_version:
        description: 'Mirai版本号（可选，默认使用最新版本）'
        required: false
        type: string
      bouncycastle_version:
        description: 'BouncyCastle版本号（可选，默认使用1.64）'
        required: false
        type: string
        default: '1.64'
      maven_repo:
        description: 'Maven仓库地址（可选，默认使用华为镜像）'
        required: false
        type: string
        default: 'https://mirrors.huaweicloud.com/repository/maven'
      create_release:
        description: '是否创建 Release'
        type: boolean
        default: false
        required: true
      force_build:
        description: '是否强制构建（忽略版本检查）'
        type: boolean
        default: false
        required: true

permissions:
  contents: write  # 用于更新 README 和创建 release
  packages: write  # 用于推送 Docker 镜像

env:
  IMAGE_NAME: overflow
  DOCKER_HUB_REPO: ${{ vars.DOCKERHUB_USERNAME }}/overflow

jobs:
  check_versions:
    runs-on: ubuntu-latest
    outputs:
      needs_update: ${{ steps.check.outputs.needs_update }}
      overflow_version: ${{ steps.check.outputs.overflow_version }}
      mirai_version: ${{ steps.check.outputs.mirai_version }}
      bouncycastle_version: ${{ steps.check.outputs.bouncycastle_version }}
      maven_repo: ${{ steps.check.outputs.maven_repo }}
      current_overflow_version: ${{ steps.check.outputs.current_overflow_version }}
      current_mirai_version: ${{ steps.check.outputs.current_mirai_version }}
      release_date: ${{ steps.check.outputs.release_date }}
      release_url: ${{ steps.check.outputs.release_url }}
      mirai_release_date: ${{ steps.check.outputs.mirai_release_date }}
      mirai_release_url: ${{ steps.check.outputs.mirai_release_url }}
      changelog: ${{ steps.check.outputs.changelog }}
      mirai_changelog: ${{ steps.check.outputs.mirai_changelog }}
    steps:
      - name: Get latest versions
        id: check
        run: |
          # 设置默认值
          BOUNCYCASTLE_VERSION="${{ github.event.inputs.bouncycastle_version }}"
          if [ -z "$BOUNCYCASTLE_VERSION" ]; then
            BOUNCYCASTLE_VERSION="1.64"
          fi
          
          MAVEN_REPO="${{ github.event.inputs.maven_repo }}"
          if [ -z "$MAVEN_REPO" ]; then
            MAVEN_REPO="https://mirrors.huaweicloud.com/repository/maven"
          fi
          
          echo "设置构建参数:"
          echo "- BouncyCastle版本: ${BOUNCYCASTLE_VERSION}"
          echo "- Maven仓库: ${MAVEN_REPO}"
          
          # 如果没有指定Overflow版本，则获取最新版本
          if [ -z "${{ github.event.inputs.overflow_version }}" ]; then
            echo "自动获取 Overflow 最新版本"
            OVERFLOW_VERSION=$(curl -s https://api.github.com/repos/MrXiaoM/Overflow/releases/latest | jq -r '.tag_name' | sed 's/^v//')
            if [ -z "$OVERFLOW_VERSION" ] || [ "$OVERFLOW_VERSION" = "null" ]; then
              echo "::error::无法获取 Overflow 最新版本"
              exit 1
            fi
            echo "获取到 Overflow 最新版本: ${OVERFLOW_VERSION}"
            RELEASE_URL="https://github.com/MrXiaoM/Overflow/releases/tag/v${OVERFLOW_VERSION}"
            CHANGELOG=$(curl -s https://api.github.com/repos/MrXiaoM/Overflow/releases/latest | jq -r '.body')
            RELEASE_DATE=$(curl -s https://api.github.com/repos/MrXiaoM/Overflow/releases/latest | jq -r '.published_at')
          else
            echo "使用指定的 Overflow 版本: ${{ github.event.inputs.overflow_version }}"
            OVERFLOW_VERSION=$(echo "${{ github.event.inputs.overflow_version }}" | sed 's/^v//')
            if [ -z "$OVERFLOW_VERSION" ]; then
              echo "::error::指定的 Overflow 版本号无效"
              exit 1
            fi
            RELEASE_URL="https://github.com/MrXiaoM/Overflow/releases/tag/v${OVERFLOW_VERSION}"
            # 获取指定版本的release信息
            RELEASE_INFO=$(curl -s "https://api.github.com/repos/MrXiaoM/Overflow/releases/tags/${OVERFLOW_VERSION}")
            if [ "$(echo "$RELEASE_INFO" | jq -r '.message')" = "Not Found" ]; then
              echo "::warning::无法获取版本 ${OVERFLOW_VERSION} 的发布信息"
              CHANGELOG="手动指定版本构建（无法获取发布信息）"
              RELEASE_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            else
              CHANGELOG=$(echo "$RELEASE_INFO" | jq -r '.body')
              RELEASE_DATE=$(echo "$RELEASE_INFO" | jq -r '.published_at')
            fi
          fi
          
          # 如果没有指定Mirai版本，则获取最新版本
          if [ -z "${{ github.event.inputs.mirai_version }}" ]; then
            echo "自动获取 Mirai 最新版本"
            MIRAI_VERSION=$(curl -s https://api.github.com/repos/mamoe/mirai/releases/latest | jq -r '.tag_name' | sed 's/v//')
            if [ -z "$MIRAI_VERSION" ] || [ "$MIRAI_VERSION" = "null" ]; then
              echo "::error::无法获取 Mirai 最新版本"
              exit 1
            fi
            echo "获取到 Mirai 最新版本: ${MIRAI_VERSION}"
            MIRAI_RELEASE_URL="https://github.com/mamoe/mirai/releases/tag/v${MIRAI_VERSION}"
            MIRAI_CHANGELOG=$(curl -s https://api.github.com/repos/mamoe/mirai/releases/latest | jq -r '.body')
            MIRAI_RELEASE_DATE=$(curl -s https://api.github.com/repos/mamoe/mirai/releases/latest | jq -r '.published_at')
          else
            echo "使用指定的 Mirai 版本: ${{ github.event.inputs.mirai_version }}"
            MIRAI_VERSION=${{ github.event.inputs.mirai_version }}
            if [ -z "$MIRAI_VERSION" ]; then
              echo "::error::指定的 Mirai 版本号无效"
              exit 1
            fi
            MIRAI_RELEASE_URL="https://github.com/mamoe/mirai/releases/tag/v${MIRAI_VERSION}"
            # 获取指定版本的release信息
            MIRAI_RELEASE_INFO=$(curl -s "https://api.github.com/repos/mamoe/mirai/releases/tags/${MIRAI_VERSION}")
            if [ "$(echo "$MIRAI_RELEASE_INFO" | jq -r '.message')" = "Not Found" ]; then
              echo "::warning::无法获取Mirai版本 ${MIRAI_VERSION} 的发布信息"
              MIRAI_CHANGELOG="手动指定版本构建（无法获取发布信息）"
              MIRAI_RELEASE_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            else
              MIRAI_CHANGELOG=$(echo "$MIRAI_RELEASE_INFO" | jq -r '.body')
              MIRAI_RELEASE_DATE=$(echo "$MIRAI_RELEASE_INFO" | jq -r '.published_at')
            fi
          fi
          
          # 获取上一个 Overflow 版本
          CURRENT_OVERFLOW_VERSION=$(curl -s https://api.github.com/repos/MrXiaoM/Overflow/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          if [ -z "$CURRENT_OVERFLOW_VERSION" ] || [ "$CURRENT_OVERFLOW_VERSION" == "null" ]; then
            echo "::warning::Failed to fetch current Overflow version, assuming first build"
            CURRENT_OVERFLOW_VERSION="0.0.0"
          fi

          # 获取上一个 Mirai 版本
          CURRENT_MIRAI_VERSION=$(curl -s https://api.github.com/repos/mamoe/mirai/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          if [ -z "$CURRENT_MIRAI_VERSION" ] || [ "$CURRENT_MIRAI_VERSION" == "null" ]; then
            echo "::warning::Failed to fetch current Mirai version, assuming first build"
            CURRENT_MIRAI_VERSION="0.0.0"
          fi
          
          # 比较版本
          if [ "$OVERFLOW_VERSION" != "$CURRENT_OVERFLOW_VERSION" ] || [ "$MIRAI_VERSION" != "$CURRENT_MIRAI_VERSION" ]; then
            echo "Update needed: $CURRENT_OVERFLOW_VERSION (mirai: $CURRENT_MIRAI_VERSION) -> $OVERFLOW_VERSION (mirai: $MIRAI_VERSION)"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          else
            echo "No update needed, current version is latest: $CURRENT_OVERFLOW_VERSION (mirai: $CURRENT_MIRAI_VERSION)"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          fi
          
          # 输出版本信息
          {
            echo "overflow_version=${OVERFLOW_VERSION}"
            echo "mirai_version=${MIRAI_VERSION}"
            echo "current_overflow_version=${CURRENT_OVERFLOW_VERSION}"
            echo "current_mirai_version=${CURRENT_MIRAI_VERSION}"
            echo "bouncycastle_version=${BOUNCYCASTLE_VERSION}"
            echo "maven_repo=${MAVEN_REPO}"
            echo "release_date=${RELEASE_DATE}"
            echo "release_url=${RELEASE_URL}"
            echo "mirai_release_date=${MIRAI_RELEASE_DATE}"
            echo "mirai_release_url=${MIRAI_RELEASE_URL}"
            echo "changelog<<EOF"
            echo "${CHANGELOG}"
            echo "EOF"
            echo "mirai_changelog<<EOF"
            echo "${MIRAI_CHANGELOG}"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          # 检查版本号是否为空
          if [ -z "${OVERFLOW_VERSION}" ]; then
            echo "::error::Overflow 版本号不能为空"
            exit 1
          fi
          
          if [ -z "${MIRAI_VERSION}" ]; then
            echo "::error::Mirai 版本号不能为空"
            exit 1
          fi
          
          if [ -z "${BOUNCYCASTLE_VERSION}" ]; then
            echo "::error::BouncyCastle 版本号不能为空"
            exit 1
          fi
          
          echo "Using Overflow version: ${OVERFLOW_VERSION}"
          echo "Using Mirai version: ${MIRAI_VERSION}"
          echo "Using BouncyCastle version: ${BOUNCYCASTLE_VERSION}"
          echo "Using Maven repo: ${MAVEN_REPO}"

  build:
    needs: check_versions
    if: |
      needs.check_versions.outputs.needs_update == 'true' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.force_build == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        env:
          OVERFLOW_VERSION: ${{ needs.check_versions.outputs.overflow_version }}
          MIRAI_VERSION: ${{ needs.check_versions.outputs.mirai_version }}
          BOUNCYCASTLE_VERSION: ${{ needs.check_versions.outputs.bouncycastle_version }}
          MAVEN_REPO: ${{ needs.check_versions.outputs.maven_repo }}
        with:
          context: .
          push: true
          build-args: |
            MAVEN_REPO=${{ env.MAVEN_REPO }}
            OVERFLOW_VERSION=${{ env.OVERFLOW_VERSION }}
            MIRAI_VERSION=${{ env.MIRAI_VERSION }}
            BOUNCYCASTLE_VERSION=${{ env.BOUNCYCASTLE_VERSION }}
          tags: |
            ${{ env.DOCKER_HUB_REPO }}:latest
            ${{ env.DOCKER_HUB_REPO }}:${{ env.OVERFLOW_VERSION }}-mirai.${{ env.MIRAI_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update README versions
        if: success()
        run: |
          # 更新版本信息
          sed -i "s/Overflow Core: .*/Overflow Core: ${{ needs.check_versions.outputs.overflow_version }}/" README.md
          sed -i "s/Mirai Console: .*/Mirai Console: ${{ needs.check_versions.outputs.mirai_version }}/" README.md
          sed -i "s/BouncyCastle: .*/BouncyCastle: ${{ needs.check_versions.outputs.bouncycastle_version }}/" README.md
          
          # 配置 Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 提交更改
          git add README.md
          git commit -m "chore: 更新版本信息 [skip ci]" || echo "No changes to commit"
          git push

      - name: Create Release
        if: |
          success() && (
            github.event_name == 'schedule' ||
            (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
          )
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ needs.check_versions.outputs.overflow_version }}"
          name: "Overflow Docker ${{ needs.check_versions.outputs.overflow_version }}"
          body: |
            自动更新 Overflow Docker 版本
            
            ## 版本信息
            
            ### Overflow
            - 版本: ${{ needs.check_versions.outputs.current_overflow_version }} -> ${{ needs.check_versions.outputs.overflow_version }}
            - 发布时间: ${{ needs.check_versions.outputs.release_date }}
            - Release 链接: ${{ needs.check_versions.outputs.release_url }}
            
            ### Mirai
            - 版本: ${{ needs.check_versions.outputs.current_mirai_version }} -> ${{ needs.check_versions.outputs.mirai_version }}
            - 发布时间: ${{ needs.check_versions.outputs.mirai_release_date }}
            - Release 链接: ${{ needs.check_versions.outputs.mirai_release_url }}
            
            ### 其他信息
            - BouncyCastle: ${{ needs.check_versions.outputs.bouncycastle_version }}
            - Maven仓库: ${{ needs.check_versions.outputs.maven_repo }}
            
            ## Docker 镜像
            ```bash
            # 最新版本
            docker pull ${{ env.DOCKER_HUB_REPO }}:${{ needs.check_versions.outputs.overflow_version }}-mirai.${{ needs.check_versions.outputs.mirai_version }}
            
            # 或使用 latest 标签
            docker pull ${{ env.DOCKER_HUB_REPO }}:latest
            ```
            
            ## Overflow 更新说明
            
            ${{ needs.check_versions.outputs.changelog }}
            
            ## Mirai 更新说明
            
            ${{ needs.check_versions.outputs.mirai_changelog }}
          draft: false
          prerelease: false

      - name: Update Summary
        if: success()
        run: |
          echo "Docker image updated to version ${{ needs.check_versions.outputs.overflow_version }}-mirai.${{ needs.check_versions.outputs.mirai_version }}" >> $GITHUB_STEP_SUMMARY 